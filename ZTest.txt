/*
#include <iostream>
#include <iomanip>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <fstream>
#include <sstream>
#include <thread>
using namespace std;

std::mutex mtx;
std::condition_variable cv;
bool ready = false;

void do_print_id();
void go();

int main(int argc, char*argv[])
{
	std::thread threads;
	threads= std::thread(do_print_id);
	std::cout<<"thread ready now"<<std::endl;
	std::this_thread::sleep_for(std::chrono::milliseconds(1000*1));


	go();

	threads.join();
	return 0;
}

void do_print_id()
{
	int j=0;
	while(j< 100)
	{
		{
			std::unique_lock <std::mutex> lck(mtx);
			std::cout<<"wait "<<" begin "<<j<<std::endl;
			cv.wait(lck);
			std::cout<<"wait "<<" end "<<j<<std::endl;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(1000*10));
		j++;
	}
}

void go()
{
	int i =0;
	while (i<10)
	{
		{
			std::unique_lock <std::mutex> lck(mtx);
			std::cout<<"---------------------notify "<<i<<std::endl;
			cv.notify_all();
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(500*1));
		i++;
	}
}
*/
